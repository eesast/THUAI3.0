// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: MessageToClient.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Logic.Constant {

  /// <summary>Holder for reflection information generated from MessageToClient.proto</summary>
  public static partial class MessageToClientReflection {

    #region Descriptor
    /// <summary>File descriptor for MessageToClient.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessageToClientReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVNZXNzYWdlVG9DbGllbnQucHJvdG8SD2dvb2dsZS5wcm90b2J1ZiK9AQoP",
            "TWVzc2FnZVRvQ2xpZW50EhUKDVBsYXllcklEQWdlbnQYASABKAUSFgoOUGxh",
            "eWVySURDbGllbnQYAiABKAUSFwoPUGxheWVyUG9zaXRpb25YGAMgASgDEhcK",
            "D1BsYXllclBvc2l0aW9uWRgEIAEoAxIXCg9GYWNpbmdEaXJlY3Rpb24YBSAB",
            "KAUSDQoFSXNBZGQYBiABKAgSDwoHT2JqVHlwZRgHIAEoBRIQCghPYmpUeXBl",
            "MhgIIAEoBUIRqgIOTG9naWMuQ29uc3RhbnRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Logic.Constant.MessageToClient), global::Logic.Constant.MessageToClient.Parser, new[]{ "PlayerIDAgent", "PlayerIDClient", "PlayerPositionX", "PlayerPositionY", "FacingDirection", "IsAdd", "ObjType", "ObjType2" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MessageToClient : pb::IMessage<MessageToClient> {
    private static readonly pb::MessageParser<MessageToClient> _parser = new pb::MessageParser<MessageToClient>(() => new MessageToClient());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageToClient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Logic.Constant.MessageToClientReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageToClient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageToClient(MessageToClient other) : this() {
      playerIDAgent_ = other.playerIDAgent_;
      playerIDClient_ = other.playerIDClient_;
      playerPositionX_ = other.playerPositionX_;
      playerPositionY_ = other.playerPositionY_;
      facingDirection_ = other.facingDirection_;
      isAdd_ = other.isAdd_;
      objType_ = other.objType_;
      objType2_ = other.objType2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageToClient Clone() {
      return new MessageToClient(this);
    }

    /// <summary>Field number for the "PlayerIDAgent" field.</summary>
    public const int PlayerIDAgentFieldNumber = 1;
    private int playerIDAgent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIDAgent {
      get { return playerIDAgent_; }
      set {
        playerIDAgent_ = value;
      }
    }

    /// <summary>Field number for the "PlayerIDClient" field.</summary>
    public const int PlayerIDClientFieldNumber = 2;
    private int playerIDClient_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIDClient {
      get { return playerIDClient_; }
      set {
        playerIDClient_ = value;
      }
    }

    /// <summary>Field number for the "PlayerPositionX" field.</summary>
    public const int PlayerPositionXFieldNumber = 3;
    private long playerPositionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerPositionX {
      get { return playerPositionX_; }
      set {
        playerPositionX_ = value;
      }
    }

    /// <summary>Field number for the "PlayerPositionY" field.</summary>
    public const int PlayerPositionYFieldNumber = 4;
    private long playerPositionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerPositionY {
      get { return playerPositionY_; }
      set {
        playerPositionY_ = value;
      }
    }

    /// <summary>Field number for the "FacingDirection" field.</summary>
    public const int FacingDirectionFieldNumber = 5;
    private int facingDirection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FacingDirection {
      get { return facingDirection_; }
      set {
        facingDirection_ = value;
      }
    }

    /// <summary>Field number for the "IsAdd" field.</summary>
    public const int IsAddFieldNumber = 6;
    private bool isAdd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAdd {
      get { return isAdd_; }
      set {
        isAdd_ = value;
      }
    }

    /// <summary>Field number for the "ObjType" field.</summary>
    public const int ObjTypeFieldNumber = 7;
    private int objType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObjType {
      get { return objType_; }
      set {
        objType_ = value;
      }
    }

    /// <summary>Field number for the "ObjType2" field.</summary>
    public const int ObjType2FieldNumber = 8;
    private int objType2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObjType2 {
      get { return objType2_; }
      set {
        objType2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageToClient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageToClient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerIDAgent != other.PlayerIDAgent) return false;
      if (PlayerIDClient != other.PlayerIDClient) return false;
      if (PlayerPositionX != other.PlayerPositionX) return false;
      if (PlayerPositionY != other.PlayerPositionY) return false;
      if (FacingDirection != other.FacingDirection) return false;
      if (IsAdd != other.IsAdd) return false;
      if (ObjType != other.ObjType) return false;
      if (ObjType2 != other.ObjType2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerIDAgent != 0) hash ^= PlayerIDAgent.GetHashCode();
      if (PlayerIDClient != 0) hash ^= PlayerIDClient.GetHashCode();
      if (PlayerPositionX != 0L) hash ^= PlayerPositionX.GetHashCode();
      if (PlayerPositionY != 0L) hash ^= PlayerPositionY.GetHashCode();
      if (FacingDirection != 0) hash ^= FacingDirection.GetHashCode();
      if (IsAdd != false) hash ^= IsAdd.GetHashCode();
      if (ObjType != 0) hash ^= ObjType.GetHashCode();
      if (ObjType2 != 0) hash ^= ObjType2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerIDAgent != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerIDAgent);
      }
      if (PlayerIDClient != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerIDClient);
      }
      if (PlayerPositionX != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(PlayerPositionX);
      }
      if (PlayerPositionY != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(PlayerPositionY);
      }
      if (FacingDirection != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FacingDirection);
      }
      if (IsAdd != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsAdd);
      }
      if (ObjType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ObjType);
      }
      if (ObjType2 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ObjType2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerIDAgent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIDAgent);
      }
      if (PlayerIDClient != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIDClient);
      }
      if (PlayerPositionX != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerPositionX);
      }
      if (PlayerPositionY != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerPositionY);
      }
      if (FacingDirection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FacingDirection);
      }
      if (IsAdd != false) {
        size += 1 + 1;
      }
      if (ObjType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObjType);
      }
      if (ObjType2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObjType2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageToClient other) {
      if (other == null) {
        return;
      }
      if (other.PlayerIDAgent != 0) {
        PlayerIDAgent = other.PlayerIDAgent;
      }
      if (other.PlayerIDClient != 0) {
        PlayerIDClient = other.PlayerIDClient;
      }
      if (other.PlayerPositionX != 0L) {
        PlayerPositionX = other.PlayerPositionX;
      }
      if (other.PlayerPositionY != 0L) {
        PlayerPositionY = other.PlayerPositionY;
      }
      if (other.FacingDirection != 0) {
        FacingDirection = other.FacingDirection;
      }
      if (other.IsAdd != false) {
        IsAdd = other.IsAdd;
      }
      if (other.ObjType != 0) {
        ObjType = other.ObjType;
      }
      if (other.ObjType2 != 0) {
        ObjType2 = other.ObjType2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerIDAgent = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerIDClient = input.ReadInt32();
            break;
          }
          case 24: {
            PlayerPositionX = input.ReadInt64();
            break;
          }
          case 32: {
            PlayerPositionY = input.ReadInt64();
            break;
          }
          case 40: {
            FacingDirection = input.ReadInt32();
            break;
          }
          case 48: {
            IsAdd = input.ReadBool();
            break;
          }
          case 56: {
            ObjType = input.ReadInt32();
            break;
          }
          case 64: {
            ObjType2 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
